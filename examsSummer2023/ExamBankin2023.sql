#ExamBankin
# 01.	Table Design
drop database restaurant;
create database restaurant;
use restaurant;
create table products
(
    id    int(11) primary key auto_increment,
    name  varchar(30)    not null unique,
    type  varchar(30)    not null,
    price decimal(10, 2) not null

);
create table clients
(
    id         int primary key auto_increment,
    first_name varchar(50) not null,
    last_name  varchar(50) not null,
    birthdate  date        not null,
    card       varchar(50),
    review     text

);

create table tables
(
    id       int primary key auto_increment,
    floor    int not null,
    reserved tinyint(1),
    capacity int not null

);
create table waiters
(
    id         int primary key auto_increment,
    first_name varchar(50) not null,
    last_name  varchar(50) not null,
    email      varchar(50) not null,
    phone      varchar(50),
    salary     decimal(10, 2)

);

create table orders
(
    id           int primary key auto_increment,
    table_id     int  not null,
    waiter_id    int  not null,
    order_time   time not null,
    payed_status tinyint(1),
    constraint fk_orders_tables
        foreign key (table_id)
            references tables (id),
    constraint fk_orders_waiters
        foreign key (waiter_id) references waiters (id)
);

create table orders_clients
(
    order_id  int,
    client_id int,
    constraint fk_oc_orders
        foreign key (order_id)
            references orders (id),
    constraint fk_oc_client
        foreign key (client_id)
            references clients (id)

);
create table orders_products
(
    order_id   int,
    product_id int,
    constraint fk_op_order
        foreign key (order_id) references orders (id),
    constraint fk_op_product
        foreign key (product_id) references products (id)
);
SET SESSION sql_mode = 'NO_AUTO_VALUE_ON_ZERO';
# 02.	Insert
select count(*)
from products;
insert into products(name, type, price)
select concat(last_name, ' specialty'),
       'Cocktail',
       ceiling(0.01 * waiters.salary)
from waiters
where id > 6;
select *
from products
where id > 199;

# 3 update
select *
from orders
where id > 11
  and id < 24;
select *
from orders
where id between 12 and 23;
update orders
set table_id = table_id - 1
where id between 12 and 23;

# 4 delete
select w.id, (select count(*) from orders where waiter_id = w.id) as o_count
from waiters as w
having o_count = 0;
delete
from waiters as w
where (select count(*) from orders where waiter_id = w.id) = 0;

#join  orders o on w.id = o.waiter_id

# 5 clients
select *
from clients
order by birthdate desc, id desc;

# 6 Birthdate
select c.first_name, c.last_name, c.birthdate, c.review
from clients as c
where card is null
  and birthdate between '1978 - 01 - 01' and '1993 - 12 - 31'
order by c.last_name desc, c.id
limit 5;


# 7.Accounts
# #The username is generated by their last name immediately followed by their first name
# followed by the number of characters from first name and at the end "Restaurant".
# The password is their email starting from the 2nd character to the 13th character and then
# reversed.
select concat(w.last_name, w.first_name, (char_length(w.first_name)), 'Restaurant')
                                        as username,
       reverse(substring(email, 2, 12)) as password
from waiters as w
where w.salary is not null
order by password desc;

# 8. Top from menu
select id, name, count(op.order_id) `count`
from products as p
         join orders_products op on p.id = op.product_id
group by p.id
having `count` >= 5
order by `count` desc, 'name';

# 9 Availability
# table_id, capacity, count_clients
select t.id,
       capacity,
       count(oc.client_id) as count_clients,
       (
           if(capacity > count(oc.client_id), 'Free seats',
              if(capacity = count(oc.client_id), 'Full', 'Extra seats'))
           )
                           as availability
from tables as t
         join orders o on t.id = o.table_id
         join orders_clients oc on o.id = oc.order_id
where floor = 1
group by t.id
order by t.id desc;

# 9 10.	Extract bill

delimiter //
create function udf_client_bill(full_name VARCHAR(50))
    returns decimal(19, 2)
    deterministic
begin
    declare space_index int;
    set space_index := locate(' ', full_name);
    return (select sum(p.price)
            from clients as c
                     join orders_clients oc on c.id = oc.client_id
                     join orders o on o.id = oc.order_id
                     join orders_products op on o.id = op.order_id
                     join products p on p.id = op.product_id
            WHERE c.first_name = substring(full_name, 1, space_index - 1)
              AND c.last_name = substring(full_name, space_index + 1));

end//

delimiter ;


select c.first_name, c.last_name, udf_client_bill(concat(first_name, ' ', last_name)) as 'bill'

from clients as c
where c.first_name = 'Silvio'
  AND c.last_name = 'Blyth';


# 11. Happy hour
delimiter //
create procedure udp_happy_hour(`type` VARCHAR(50))
begin
    update products as p
    set price = price * 0.8
    where price >= 10
      and p.type = type;

end//
delimiter ;












